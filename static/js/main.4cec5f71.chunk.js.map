{"version":3,"sources":["logo.jpg","Challenge.js","Login.js","RatingTable.js","RoundSummary.js","AnswerAccepted.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Challenge","props","value","react_default","a","createElement","question","suggestedAnswer","Login","error","onLogin","react","Row","className","Col","src","logo","alt","Button","onClick","RatingTable","data","currentUser","Table","responsive","borderless","map","user","current","id","key","name","score","RoundSummary","formatWaitingMessage","roundSummary","this","PureComponent","AnswerAccepted","API_URL","process","App","state","joined","challenge","ratingTable","waitingForNewRound","userGaveAnswer","join","connection","window","WebSocket","MozWebSocket","_this","setState","onopen","onmessage","message","json","JSON","parse","type","Error","onerror","leave","close","format","src_AnswerAccepted","src_Challenge","registerAnswer","agree","send","_this2","_this$state","Jumbotron","RoundSummary_RoundSummary","color","size","disabled","_this3","_this$state2","Container","src_Login","Navbar","light","Nav","navbar","NavItem","concat","md","length","noGutters","showGame","xs","sm","src_RatingTable","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cec5f71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8abf8d44.jpg\";","import React from 'react'\n\nconst Challenge = props => {\n    const { value } = props\n    return <h2>{value.question} = {value.suggestedAnswer}?</h2>\n}\n\nexport default Challenge\n","import React, { Fragment } from 'react'\nimport logo from './logo.jpg'\nimport { Button, Col, Row } from 'reactstrap'\n\nconst Login = props => {\n    const { error, onLogin } = props\n    return <Fragment>\n        <Row className=\"login-pnl text-center\">\n            <Col>\n                <img src={logo} className=\"logo-row\" alt=\"Math Game Logo\"/>\n            </Col>\n        </Row>\n        <Row className=\"text-center\">\n            <Col>\n                <Button onClick={onLogin}>Let&#39;s play a game!</Button>\n            </Col>\n        </Row>\n        {error && <Row className=\"error-row\">\n            <Col>\n                An error occurred. Most likely the user limit was reached. Try again later.\n            </Col>\n        </Row>}\n    </Fragment>\n}\n\nexport default Login\n","import React from 'react'\nimport { Table } from 'reactstrap'\n\nconst RatingTable = props => {\n    const { data, currentUser } = props\n    return <Table responsive borderless>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th className=\"text-center\">Score</th>\n            </tr>\n        </thead>\n        <tbody>\n            {data.map(user => {\n                const current = user.id === currentUser.id\n                return <tr key={user.id} className={current ? 'user-table-record' : ''}>\n                    <td>{current ? user.name + ' (you)' : user.name}</td>\n                    <td className=\"text-center\">{user.score}</td>\n                </tr>\n            })}\n        </tbody>\n    </Table>\n}\n\nexport default RatingTable\n","import React, { PureComponent } from 'react'\n\nexport default class RoundSummary extends PureComponent {\n\n    render() {\n        const { value } = this.props\n        return <h2>{this.formatWaitingMessage(value)}</h2>\n    }\n\n    formatWaitingMessage = (roundSummary) => {\n        if (roundSummary === 'CORRECT_FIRST_ANSWER') {\n            return <span className={'text-success'}>Correct answer!</span>\n        } else if (roundSummary === 'CORRECT_LATE_ANSWER') {\n            return <span className={'text-warning'}>Correct, but too late...</span>\n        } else if (roundSummary === 'WRONG_ANSWER') {\n            return <span className={'text-danger'}>Wrong answer.</span>\n        } else {\n            return <span>Get ready...</span>\n        }\n    }\n}\n","import React from 'react'\n\nconst AnswerAccepted = () => <h2>Checking...</h2>\n\nexport default AnswerAccepted\n","export const API_URL = process.env.REACT_APP_API_URL\n","import React, { PureComponent } from 'react'\nimport { Button, Col, Container, Jumbotron, Nav, Navbar, NavItem, Row } from 'reactstrap'\nimport './App.css'\nimport Challenge from './Challenge'\nimport Login from './Login'\nimport RatingTable from './RatingTable'\nimport RoundSummary from './RoundSummary'\nimport AnswerAccepted from './AnswerAccepted'\nimport { API_URL } from './config'\n\nclass App extends PureComponent {\n\n    state = {\n        error: false,\n        joined: false,\n        user: {},\n        challenge: null,\n        ratingTable: [],\n        waitingForNewRound: true,\n        userGaveAnswer: false\n    }\n\n    showGame() {\n        const { challenge, roundSummary, waitingForNewRound, userGaveAnswer } = this.state\n        return <div className=\"game-pnl-wrapper\">\n            <Jumbotron className=\"text-center game-pnl\">\n                <div className=\"round-summary-pnl\">\n                    {waitingForNewRound ? <RoundSummary value={roundSummary}/> : this.format(challenge, userGaveAnswer)}\n                </div>\n                <div className=\"btn-pnl\">\n                    <Button color=\"success\" size=\"lg\" className=\"left-submit-btn\"\n                        onClick={() => this.registerAnswer(true)}\n                        disabled={userGaveAnswer || waitingForNewRound}>TRUE</Button>\n                    <Button color=\"danger\" size=\"lg\" className=\"right-submit-btn\"\n                        onClick={() => this.registerAnswer(false)}\n                        disabled={userGaveAnswer || waitingForNewRound}>FALSE</Button>\n                </div>\n            </Jumbotron>\n        </div>\n    }\n\n    render() {\n        const { error, joined, user, ratingTable } = this.state\n        return (\n            <Container className=\"main-container\">\n                {!joined && <Login error={error} onLogin={() => this.join()}/>}\n                {joined && <Navbar color=\"transparent\" light className=\"greeting-pnl\">\n                    <Nav className=\"ml-auto\" navbar>\n                        <NavItem className=\"username-pnl\">\n                            <p>{`Hello, ${user.name}`}</p>\n                            <Button color=\"link\" onClick={this.leave}>Leave</Button>\n                        </NavItem>\n                    </Nav>\n                </Navbar>}\n                {joined && <div className=\"align-middle\">\n                    <Row className=\"game-board-pnl\">\n                        <Col md={ratingTable.length > 0 ? '9' : '12'}>\n                            <Row noGutters>\n                                {this.showGame()}\n                            </Row>\n                        </Col>\n                        {ratingTable.length > 0 && <Col xs=\"12\" sm=\"12\" md=\"3\" className=\"w-100\">\n                            <Row className=\"h-100 w-100\" noGutters>\n                                <RatingTable data={ratingTable} currentUser={this.state.user}/>\n                            </Row>\n                        </Col>}\n                    </Row>\n                </div>}\n            </Container>\n        )\n    }\n\n    join = () => {\n        const WebSocket = window.WebSocket || window.MozWebSocket\n        const connection = new WebSocket(API_URL)\n        this.setState({ connection })\n\n        connection.onopen = () => {\n            this.setState({ joined: true })\n        }\n\n        connection.onmessage = (message) => {\n            const json = JSON.parse(message.data)\n            const { type } = json\n\n            if (type === 'WELCOME') {\n                const { user, ratingTable } = json\n                this.setState({ user, ratingTable })\n            } else if (type === 'START_ROUND') {\n                const { challenge } = json\n                this.setState({ challenge, waitingForNewRound: false })\n            } else if (type === 'END_ROUND') {\n                const { roundSummary, ratingTable } = json\n                this.setState({ roundSummary, ratingTable, waitingForNewRound: true, userGaveAnswer: false })\n            } else {\n                throw new Error('unexpected message type ' + type)\n            }\n        }\n\n        connection.onerror = () => {\n            this.setState({ error: true })\n        }\n    }\n\n    leave = () => {\n        this.setState({ joined: false, error: false })\n        const { connection } = this.state\n        connection.close()\n    }\n\n    format = (challenge, userGaveAnswer) => userGaveAnswer ? <AnswerAccepted/> : <Challenge value={challenge}/>\n\n    registerAnswer = (agree) => {\n        this.setState({ userGaveAnswer: true })\n        const { connection } = this.state\n        connection.send(agree)\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}