{"version":3,"sources":["logo.jpg","Challenge.js","RoundSummary.js","AnswerAccepted.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Challenge","props","value","react_default","a","createElement","question","answer","RoundSummary","formatWaitingMessage","result","className","this","PureComponent","AnswerAccepted","App","state","joined","user","challenge","ratingTable","waitingForNewRound","userGaveAnswer","join","connection","window","WebSocket","MozWebSocket","_this","setState","onopen","onerror","error","console","log","onmessage","message","json","JSON","parse","data","type","Error","leave","close","format","src_AnswerAccepted","src_Challenge","agree","send","_this2","_this$state","Container","Row","Col","name","RoundSummary_RoundSummary","ButtonGroup","size","Button","onClick","disabled","react","src","logo","alt","color","length","Table","map","current","id","key","score","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5c67bdb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8abf8d44.jpg\";","import React from 'react'\n\nconst Challenge = props => {\n\tconst { value } = props\n\treturn <h1>{value.question} = {value.answer}?</h1>\n}\n\nexport default Challenge\n","import React, { PureComponent } from 'react'\n\nexport default class RoundSummary extends PureComponent {\n\n\trender() {\n\t\tconst { value } = this.props\n\t\treturn <h1>{this.formatWaitingMessage(value)}</h1>\n\t}\n\n\tformatWaitingMessage = (result) => {\n\t\tif (result === 'CORRECT_FIRST_ANSWER') {\n\t\t\treturn <span className={'text-success'}>Correct answer!</span>\n\t\t} else if (result === 'CORRECT_LATE_ANSWER') {\n\t\t\treturn <span className={'text-warning'}>Correct, but too late...</span>\n\t\t} else if (result === 'WRONG_ANSWER') {\n\t\t\treturn <span className={'text-danger'}>Wrong answer.</span>\n\t\t} else {\n\t\t\treturn <span>Waiting for a new round...</span>\n\t\t}\n\t}\n}\n","import React from 'react'\n\nconst AnswerAccepted = () => {\n\treturn <h1>Checking...</h1>\n}\n\nexport default AnswerAccepted\n","import React, { Fragment, PureComponent } from 'react'\nimport { Button, ButtonGroup, Col, Container, Row, Table } from 'reactstrap'\nimport './App.css'\nimport Challenge from './Challenge'\nimport RoundSummary from './RoundSummary'\nimport AnswerAccepted from './AnswerAccepted'\nimport logo from './logo.jpg'\n\nclass App extends PureComponent {\n\n    state = {\n        joined: false,\n        user: {},\n        challenge: null,\n        ratingTable: [],\n        waitingForNewRound: true,\n        userGaveAnswer: false\n    }\n\n    render() {\n        const { joined, user, challenge, ratingTable, result, waitingForNewRound, userGaveAnswer } = this.state\n        return (\n            <Container>\n                <Row>\n                    <Col className=\"text-center\">\n                        {joined && <div>\n                            <p>\n                                <h4>{user.name}</h4>\n                            </p>\n                            <p>\n                                {waitingForNewRound ?\n                                    <RoundSummary value={result}/> : this.format(challenge, userGaveAnswer)}\n                            </p>\n                            <p>\n                                <ButtonGroup size={'lg'}>\n                                    <Button onClick={() => this.answer(true)}\n                                        disabled={userGaveAnswer || waitingForNewRound}>True</Button>\n                                    <Button onClick={() => this.answer(false)}\n                                        disabled={userGaveAnswer || waitingForNewRound}>False</Button>\n                                </ButtonGroup>\n                            </p>\n                        </div>}\n                        {!joined && <Fragment>\n                            <Row className={'App-logo-row'}>\n                                <Col>\n                                    <img src={logo} alt=\"Math Game Logo\"/>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Button onClick={this.join}>Let&#39;s play a game!</Button>\n                                </Col>\n                            </Row>\n                        </Fragment>}\n                        {joined && <Button color=\"link\" onClick={this.leave}>Leave the game</Button>}\n                        {joined && ratingTable.length > 0 && <Table>\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Score</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {ratingTable.map(user => {\n                                    const current = user.id === this.state.user.id\n                                    return <tr key={user.id}\n                                        className={current ? 'App-user-table-record' : ''}>\n                                        <td>{current ? user.name + ' (you)' : user.name}</td>\n                                        <td>{user.score}</td>\n                                    </tr>\n                                })}\n                            </tbody>\n                        </Table>}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n    join = () => {\n        const WebSocket = window.WebSocket || window.MozWebSocket\n        const connection = new WebSocket('ws://localhost:8080')\n        this.setState({ connection })\n\n        connection.onopen = () => {\n            this.setState({ joined: true })\n        }\n\n        connection.onerror = error => {\n            console.log('Error occurred', error)\n        }\n\n        connection.onmessage = message => {\n            const json = JSON.parse(message.data)\n            const { type } = json\n\n            if (type === 'WELCOME') {\n                const { user, ratingTable } = json\n                this.setState({ user, ratingTable })\n            } else if (type === 'START_ROUND') {\n                const { challenge } = json\n                this.setState({ challenge, waitingForNewRound: false })\n            } else if (type === 'END_ROUND') {\n                const { result, ratingTable } = json\n                this.setState({ result, ratingTable, waitingForNewRound: true, userGaveAnswer: false })\n            } else {\n                throw new Error('unexpected message type ' + type)\n            }\n        }\n    }\n\n    leave = () => {\n        this.setState({ joined: false })\n        const { connection } = this.state\n        connection.close()\n    }\n\n    format = (challenge, userGaveAnswer) => userGaveAnswer ? <AnswerAccepted/> : <Challenge value={challenge}/>\n\n    answer = (agree) => {\n        this.setState({ userGaveAnswer: true })\n        const { connection } = this.state\n        connection.send(agree)\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}